"use strict";
/**
 * Copyright 2025-present Coinbase Global, Inc.
 *
 * This file is generated by Openapi Generator https://github.com/openapitools/openapi-generator
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *  Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionStatus = void 0;
/**
 * - UNKNOWN_TRANSACTION_STATUS: An Unknown Transaction status  - TRANSACTION_CREATED: The Transaction has been created and is awaiting Consensus approval This is a non-terminal status  - TRANSACTION_REQUESTED: The Transaction has reached User Consensus and is awaiting Coinbase Prime approval This is a non-terminal status  - TRANSACTION_APPROVED: The Transaction has been authorized by Coinbase Prime This is a non-terminal status  - TRANSACTION_GASSING: The transaction is awaiting blockchain resources for broadcast This is a non-terminal status  - TRANSACTION_GASSED: The transaction has received blockchain resources for broadcasting This is a non-terminal status  - TRANSACTION_PROVISIONED: The transaction has been provisioned and is awaiting planning This is a non-terminal status  - TRANSACTION_PLANNED: The transaction has been constructed. This is a non-terminal status  - TRANSACTION_PROCESSING: The transaction is currently processing and awaiting finalization This is a non-terminal status  - TRANSACTION_RESTORED: The transaction has been broadcasted to the network. This is a non-terminal status  - TRANSACTION_DONE: The transaction has confirmed on-chain and finished. This is a terminal status  - TRANSACTION_IMPORT_PENDING: The transaction deposit has been detected and is awaiting finalization. This is a non-terminal status  - TRANSACTION_IMPORTED: The transaction deposit and reward has been detected. This is a terminal status  - TRANSACTION_CANCELLED: The transaction has been cancelled This is a terminal status  - TRANSACTION_REJECTED: The transaction was rejected before construction and broadcasting. This is a terminal status  - TRANSACTION_DELAYED: The transaction s taking longer than expected to confirm on-chain. This is a non-terminal status  - TRANSACTION_RETRIED: The transaction has been recreated and retried, this occurs when network congestion results in transfers becoming extremely delayed due to insufficient fees or network resources such as CPU, RAM, or NET This is a terminal status  - TRANSACTION_FAILED: The transaction failed on-chain (the fee was spent but the operation failed). This is a terminal status  - TRANSACTION_EXPIRED: The transaction has expired. This is a terminal status  - TRANSACTION_BROADCASTING: The transaction is currently broadcasting to the cryptocurrency network. This is a non-terminal status  - OTHER_TRANSACTION_STATUS: The transaction has reached an OTHER status. This is a non-terminal status  - TRANSACTION_CONSTRUCTED: The transaction  bctx is constructed but not yet broadcasting on chain This is a non-terminal status
 */
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["UnknownTransactionStatus"] = "UNKNOWN_TRANSACTION_STATUS";
    TransactionStatus["TransactionCreated"] = "TRANSACTION_CREATED";
    TransactionStatus["TransactionRequested"] = "TRANSACTION_REQUESTED";
    TransactionStatus["TransactionApproved"] = "TRANSACTION_APPROVED";
    TransactionStatus["TransactionGassing"] = "TRANSACTION_GASSING";
    TransactionStatus["TransactionGassed"] = "TRANSACTION_GASSED";
    TransactionStatus["TransactionProvisioned"] = "TRANSACTION_PROVISIONED";
    TransactionStatus["TransactionPlanned"] = "TRANSACTION_PLANNED";
    TransactionStatus["TransactionProcessing"] = "TRANSACTION_PROCESSING";
    TransactionStatus["TransactionRestored"] = "TRANSACTION_RESTORED";
    TransactionStatus["TransactionDone"] = "TRANSACTION_DONE";
    TransactionStatus["TransactionImportPending"] = "TRANSACTION_IMPORT_PENDING";
    TransactionStatus["TransactionImported"] = "TRANSACTION_IMPORTED";
    TransactionStatus["TransactionCancelled"] = "TRANSACTION_CANCELLED";
    TransactionStatus["TransactionRejected"] = "TRANSACTION_REJECTED";
    TransactionStatus["TransactionDelayed"] = "TRANSACTION_DELAYED";
    TransactionStatus["TransactionRetried"] = "TRANSACTION_RETRIED";
    TransactionStatus["TransactionFailed"] = "TRANSACTION_FAILED";
    TransactionStatus["TransactionExpired"] = "TRANSACTION_EXPIRED";
    TransactionStatus["TransactionBroadcasting"] = "TRANSACTION_BROADCASTING";
    TransactionStatus["OtherTransactionStatus"] = "OTHER_TRANSACTION_STATUS";
    TransactionStatus["TransactionConstructed"] = "TRANSACTION_CONSTRUCTED";
})(TransactionStatus || (exports.TransactionStatus = TransactionStatus = {}));
